/* IMPORTS */
import { manager } from "../database/main";
import { loadout } from "../COD/loadouts";
import { client, _jourloy } from "./main";
import { logs } from "../tools/logs";

import * as ds from 'discord.js';
import * as _ from "lodash";
import { tools } from "../tools/main";

/* PARAM */
const voiceChannels = {
    duo: {
        id: '865697645920911371',
        name: '–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ [2]',
    },
    trio: {
        id: '865697670852378684',
        name: '–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ [3]',
    },
    four: {
        id: '865697708676087828',
        name: '–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ [4]',
    },
    five: {
        id: '865697728766803998',
        name: '–ò–≥—Ä–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞ [5]',
    },
}
const invites = {};
let voiceUsers: string[] = [];
let banVoiceUsers: string[] = [];
let checkRules = false;
let checkRoles = false;

/* INTERVALS */
/**
 * Check rules and roles for emoutes
 */
setInterval(() => {
    client.guilds.cache.forEach(g => {
        g.fetchInvites().then(guildInvites => {
            invites[g.id] = guildInvites;
        });
    });
    if (checkRoles === false) {
        client.channels.fetch('868238068283473952').then((channel: ds.TextChannel) => {
            if (channel.messages.cache.array().length === 0) {
                channel.messages.fetch().then(messArray => {
                    const mess = messArray.array();
                    for (let i in mess) mess[i].delete();

                    const embed = new ds.MessageEmbed()
                        .setColor(0xf05656)
                        .setTitle(`–†–æ–ª–∏`)
                        .setDescription(`–†–æ–ª–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –≤–∏–¥–µ—Ç—å –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä—ã—Ç—ã –æ—Ç –¥—Ä—É–≥–∏—Ö, –∏—Å–∫–∞—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∏–≥—Ä—ã –∏ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ

–î–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ - **–∂–º–∏ –Ω–∞ —ç–º–æ—Ü–∏—é –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º**
–î–ª—è –æ—Ç–º–µ–Ω—ã —Ä–æ–ª–∏ - **–∂–º–∏ –Ω–∞ —ç–º–æ—Ü–∏—é –µ—â–µ —Ä–∞–∑**
_(–∏–º–µ–π –≤–≤–∏–¥—É, —á—Ç–æ –±–æ—Ç —Å—Ä–∞–∑—É —É–±–µ—Ä–µ—Ç —Ç–≤–æ—é —Ä–µ–∞–∫—Ü–∏—é. –¢–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)_

> **–†–û–õ–ò (–ø–æ—Å—Ç–∞–≤—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∏–∂–µ)**

**–û–±—â–µ–µ**
üîî = –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç—Ä–∏–º–∞—Ö

**–ò–≥—Ä–æ–≤—ã–µ**
üî´ = COD: Warzone
üó° = New World

> **–†–û–õ–ò (–Ω–µ–ª—å–∑—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫)**

**–û–±—â–µ–µ**
<@&869690641708351498> - –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º (–∏–Ω–≤–∞–π—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä) –ø—Ä–∏—à–µ–ª —Ö–æ—Ç—è –±—ã 1 —á–µ–ª–æ–≤–µ–∫
<@&869690527308726303> - –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º (–∏–Ω–≤–∞–π—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä) –ø—Ä–∏—à–ª–æ 25 –∏ –±–æ–ª–µ–µ –ª—é–¥–µ–π
<@&869690267203153981> - –ø–æ —Ç–≤–æ–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º (–∏–Ω–≤–∞–π—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä) –ø—Ä–∏—à–ª–æ 50 –∏ –±–æ–ª–µ–µ –ª—é–¥–µ–π. –≠—Ç–∞ —Ä–æ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –¥–µ–ª–∞–µ—Ç –Ω–∏–∫ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
`)
                        .setFooter(`With ‚ù§Ô∏è by Jourloy`)

                    channel.send(embed).then(mss => {
                        mss.react('üîî');
                        mss.react('üî´');
                        mss.react('üó°');
                    })
                })
            }
        })
    }
}, 1000)

/**
 * Clear voice users array every 5 minutes
 */
setInterval(() => {
    voiceUsers = [];
    banVoiceUsers = [];
}, tools.convertTime({ minutes: 2 }));

/** */
setInterval(() => {
    const warningsID = {};
    for (let i in voiceUsers) {
        if (warningsID[voiceUsers[i]] == null) {
            warningsID[voiceUsers[i]] = { count: 1 };
        } else if (warningsID[voiceUsers[i]] != null) {
            warningsID[voiceUsers[i]].count++;
        }
    }
    for (let i in warningsID) {
        if (warningsID[i].count > 3 && banVoiceUsers.includes(i) === false) {
            logs.add(`${i} created too many channels`);
            banVoiceUsers.push(i);
        }
    }
}, 500)

/**
 * Remove unused and undeleted channels
 */
setInterval(() => {
    if (_jourloy.guild == null) return;
    const channelsArray = _jourloy.guild.channels.cache.array();
    const channels: ds.GuildChannel[] = [];
    for (let i in channelsArray) {
        if (channelsArray[i].type === 'voice' && (channelsArray[i].name === voiceChannels.duo.name || channelsArray[i].name === voiceChannels.trio.name || channelsArray[i].name === voiceChannels.four.name || channelsArray[i].name === voiceChannels.five.name)) channels.push(channelsArray[i]);
    }
    for (let i in channels) {
        if (channels[i].members.array().length === 0) {
            channels[i].delete()
                .then(() => { logs.add(`Delete created channel (interval)`) })
                .catch(() => { });
        }
    }
}, 10000)

/**
 * Create voice channels
 */
setInterval(() => {
    if (_jourloy.guild == null) return;
    const deleteFunction = (channelNew: ds.GuildChannel) => {
        if (channelNew.members.array().length === 0) {
            channelNew.delete()
                .then(() => { logs.add(`Delete created channel (function)`) })
                .catch(() => { });
            return true;
        }
        return false;
    }

    const repeatCheck = (channelNew: ds.GuildChannel) => {
        setTimeout(() => { deleteChannel(channelNew) }, 1000)
    }

    const deleteChannel = (channelNew: ds.GuildChannel) => {
        if (deleteFunction(channelNew) === false) repeatCheck(channelNew);
    }

    /**
     * Create channel with limit is 2
     */
    client.channels.fetch(voiceChannels.duo.id).then((channel: ds.VoiceChannel | null) => {
        if (channel == null || channel.full == null || channel.full === false) return;

        const parent = channel.parent;
        const guild = channel.guild;
        const name = voiceChannels.duo.name;
        const options: ds.GuildCreateChannelOptions = {
            type: 'voice',
            userLimit: 2,
            position: 10,
            parent: parent,
        }
        const user = channel.members.array()[0].user;
        voiceUsers.push(user.id);
        if (banVoiceUsers.includes(user.id) === true) {
            let userVoiceState: ds.VoiceState = null;
            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }
                userVoiceState.kick(`Created too many channels`);
                logs.add(`Kick ${user.id} from voice channel`, true);
                return;
            });
        } else {
            let userVoiceState: ds.VoiceState = null;
            let channelNew: ds.GuildChannel = null;
            let idNew: string = null;

            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }

                guild.channels.create(name, options).then(data => {
                    idNew = data.id;
                    const guildChannels = guild.channels.cache.array();
                    for (let i in guildChannels) if (guildChannels[i].id === idNew) channelNew = guildChannels[i];
                    userVoiceState.setChannel(channelNew)
                        .then(res => { logs.add(`Create channel for ${user.id} with limit 2`) })
                        .catch(err => { logs.add(`${user.id} fast leaved from channel`, true, true) });
                    repeatCheck(channelNew);
                });
            });
        }
    });

    /**
     * Create channel with limit is 3
     */
    client.channels.fetch(voiceChannels.trio.id).then((channel: ds.VoiceChannel | null) => {
        if (channel == null || channel.full == null || channel.full === false) return;

        const parent = channel.parent;
        const guild = channel.guild;
        const name = voiceChannels.trio.name;
        const options: ds.GuildCreateChannelOptions = {
            type: 'voice',
            userLimit: 3,
            position: 10,
            parent: parent,
        }
        const user = channel.members.array()[0].user;
        voiceUsers.push(user.id);
        if (banVoiceUsers.includes(user.id) === true) {
            let userVoiceState: ds.VoiceState = null;
            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }
                userVoiceState.kick(`Created too many channels`);
                logs.add(`Kick ${user.id} from voice channel`, true);
                return;
            });
        } else {
            let userVoiceState: ds.VoiceState = null;
            let channelNew: ds.GuildChannel = null;
            let idNew: string = null;

            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }

                guild.channels.create(name, options).then(data => {
                    idNew = data.id;
                    const guildChannels = guild.channels.cache.array();
                    for (let i in guildChannels) if (guildChannels[i].id === idNew) channelNew = guildChannels[i];
                    userVoiceState.setChannel(channelNew)
                        .then(res => { logs.add(`Create channel for ${user.id} with limit 3`) })
                        .catch(err => { logs.add(`${user.id} fast leaved from channel`, true, true) });
                    repeatCheck(channelNew);
                });
            });
        }
    });

    /**
     * Create channel with limit is 4
     */
    client.channels.fetch(voiceChannels.four.id).then((channel: ds.VoiceChannel | null) => {
        if (channel == null || channel.full == null || channel.full === false) return;

        const parent = channel.parent;
        const guild = channel.guild;
        const name = voiceChannels.four.name;
        const options: ds.GuildCreateChannelOptions = {
            type: 'voice',
            userLimit: 4,
            position: 10,
            parent: parent,
        }
        const user = channel.members.array()[0].user;
        voiceUsers.push(user.id);
        if (banVoiceUsers.includes(user.id) === true) {
            let userVoiceState: ds.VoiceState = null;
            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }
                userVoiceState.kick(`Created too many channels`);
                logs.add(`Kick ${user.id} from voice channel`, true);
                return;
            });
        } else {
            let userVoiceState: ds.VoiceState = null;
            let channelNew: ds.GuildChannel = null;
            let idNew: string = null;

            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }

                guild.channels.create(name, options).then(data => {
                    idNew = data.id;
                    const guildChannels = guild.channels.cache.array();
                    for (let i in guildChannels) if (guildChannels[i].id === idNew) channelNew = guildChannels[i];
                    userVoiceState.setChannel(channelNew)
                        .then(res => { logs.add(`Create channel for ${user.id} with limit 4`) })
                        .catch(err => { logs.add(`${user.id} fast leaved from channel`, true, true) });
                    repeatCheck(channelNew);
                });
            });
        }
    });

    /**
     * Create channel with limit is 5
     */
    client.channels.fetch(voiceChannels.five.id).then((channel: ds.VoiceChannel | null) => {
        if (channel == null || channel.full == null || channel.full === false) return;

        const parent = channel.parent;
        const guild = channel.guild;
        const name = voiceChannels.five.name;
        const options: ds.GuildCreateChannelOptions = {
            type: 'voice',
            userLimit: 5,
            position: 10,
            parent: parent,
        }
        const user = channel.members.array()[0].user;
        voiceUsers.push(user.id);
        if (banVoiceUsers.includes(user.id) === true) {
            let userVoiceState: ds.VoiceState = null;
            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }
                userVoiceState.kick(`Created too many channels`);
                logs.add(`Kick ${user.id} from voice channel`, true);
                return;
            });
        } else {
            let userVoiceState: ds.VoiceState = null;
            let channelNew: ds.GuildChannel = null;
            let idNew: string = null;

            guild.members.fetch(user.id).then(member => {
                for (let i in member.guild.voiceStates.cache.array()) {
                    if (user.id === member.guild.voiceStates.cache.array()[i].id) userVoiceState = member.guild.voiceStates.cache.array()[i];
                }

                guild.channels.create(name, options).then(data => {
                    idNew = data.id;
                    const guildChannels = guild.channels.cache.array();
                    for (let i in guildChannels) if (guildChannels[i].id === idNew) channelNew = guildChannels[i];
                    userVoiceState.setChannel(channelNew)
                        .then(res => { logs.add(`Create channel for ${user.id} with limit 5`) })
                        .catch(err => { logs.add(`${user.id} fast leaved from channel`, true, true) });
                    repeatCheck(channelNew);
                });
            });
        }
    });

}, 1000)

/* CLASSES */
export class discord {

    public static checkName(id: string): boolean {
        const members = _jourloy.guild.members.cache.array();
        for (let i in members) {
            if (members[i].id === id) return true;
        }
        return false;
    }

    public static sendPayRemind(tag: string) {
        if (tag === 'nvy') {
            manager.nvyGetServerConfig().then(configs => {
                if (configs.pays != null && configs.pays === true) {
                    client.users.fetch(configs.creator).then(user => {
                        const embed = new ds.MessageEmbed()
                            .setColor(0xf05656)
                            .setTitle(`–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.username}`)
                            .setDescription('–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å –í–∞–º –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–∂–Ω–æ–π –¥–µ—Ç–∞–ª–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–æ –º–Ω–æ–π. –ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å –Ω–∞—Å—á–µ—Ç —Å–ø–∞–º–∞, —è –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ 1-2 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü\n\n**–ü–æ–¥–ø–∏—Å–∫–∞:**\n–ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å 17 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞, –Ω–æ —Ç–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞, —Ç–∞–∫ —á—Ç–æ –ø–æ–ª–æ–≤–∏–Ω–∞ –∞–≤–≥—É—Å—Ç–∞ –í–∞–º –≤ –ø–æ–¥–∞—Ä–æ–∫ üòÅ\n\n**–û–ø–ª–∞—Ç–∞:**\n–ï—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞\n\n**–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å–ø–∞–º –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö?**\n–ñ–∞–ª—å. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ `!close_dm` –∏ —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–Ω–µ –∫–∞–Ω–∞–ª—ã: `server_logs`\n\n**–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**')
                            .addFields(
                                { name: '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', value: '–ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –∑–Ω–∞–∫–∞ `?`', inline: true },
                                { name: '–û—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É', value: '`!clear_dm`', inline: true },
                                { name: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', value: '`!close_dm`', inline: true },
                                { name: '–ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å?', value: '`!payment`', inline: true },
                            )
                            .setImage('https://cdn.discordapp.com/attachments/867012893157359647/867012929865383956/Payment.png')
                            .setFooter(`With ‚ù§Ô∏è by Jourloy`)
                        user.send(embed)
                            .then(() => {
                                client.channels.fetch('867026068241383424').then((channel: ds.TextChannel) => {
                                    channel.send('Message for NAMVSEYASNO delivered');
                                })
                            })
                            .catch(err => { console.log(err) });
                    })
                }
            })
        }
    }
}

/* REACTIONS */
client.on('message', msg => {
    if (msg.author.bot === true) return;
    const channelID = msg.channel.id;
    const authorID = msg.author.id;
    const message = msg.content;
    const messageSplit = message.split(' ');
    const command = messageSplit[0].split('!')[1];

    /* <=========================== DM ===========================> */

    if (command === 'clear_dm' && msg.guild == null) {
        const limit = parseInt(messageSplit[1]) || 100;
        msg.channel.messages.fetch({ limit: limit }).then(mess => {
            const messages = mess.array();
            for (let i in messages) {
                if (messages[i].author.bot === false) continue;
                messages[i].delete();
            }
        })
    } else if (command === 'payment' && msg.guild == null) {
        const embed = new ds.MessageEmbed()
            .setColor(0xf05656)
            .setTitle(`Payments`)
            .addFields(
                { name: 'Card', value: '4274 3200 4873 8408' },
            )
            .setFooter(`With ‚ù§Ô∏è by Jourloy`)
        msg.channel.send(embed);
    }

    if (msg.content[0] === '?' && msg.guild == null) {
        client.users.fetch('308924864407011328').then(user => {
            user.send(`MSG FROM **${msg.author.username} (${msg.author.id})**:\n\n${msg.content}`)
        })
    }

    if (authorID !== '308924864407011328') return;

    /* <=========================== DM FROM ME ===========================> */

    if (command === 'help' && msg.guild == null) {
        const embed = new ds.MessageEmbed()
            .setColor(0xf05656)
            .setTitle(`HELP`)
            .addFields(
                { name: 'Help', value: '`!jrly_help`\n`!nvy_help`' }
            )
            .setFooter(`With ‚ù§Ô∏è by Jourloy`)
        msg.channel.send(embed);
    }

    if (msg.guild == null || msg.guild.id !== '437601028662231040') return;

    /* <=========================== GUILD MESSAGES ===========================> */

    if (command === 'create_embed' && channelID === '815257750879600642') {
        const splited = message.split(' | ');
        const chanID = splited[1];
        const title = splited[2];
        const description = splited[3];

        client.channels.fetch(chanID).then((channel: ds.TextChannel) => {
            const embed = new ds.MessageEmbed()
                .setColor(0xf05656)
                .setTitle(title)
                .setDescription(description)
                .setFooter(`With ‚ù§Ô∏è by Jourloy`)
            channel.send(embed);
            msg.delete();
        })
    } else if (command === 'help' && channelID === '815257750879600642') {
        const embed = new ds.MessageEmbed()
            .setColor(0xf05656)
            .setTitle('–ü–û–ú–û–©–¨')
            .addFields(
                { name: 'Send embed in channel', value: '`!create_embed | ID | Title | Description`' }
            )
            .setFooter(`With ‚ù§Ô∏è by Jourloy`)
        msg.channel.send(embed);
        msg.delete();
    } else if (command === 'remind' && channelID === '815257750879600642') {
        msg.delete();
        const tag = messageSplit[1];
        discord.sendPayRemind(tag);
        return;
    }

    if (channelID === '816104930443395072') {
        const embed = loadout.getWeapon(command);
        msg.channel.send(embed);
    }
})

client.on('messageReactionAdd', (msg) => {
    const channelID = msg.message.channel.id;
    const emoji = msg.emoji.name;

    if (msg.me === true) return;

    if (emoji === '‚ùå') {
        if (msg.message.guild == null) {
            msg.message.delete()
        }
    } else if (emoji === 'üó°') {
        if (msg.message.author.bot === true) {
            msg.message.guild.roles.fetch('868233813183053954').then(role => {
                const users = msg.users.cache.array();
                for (let i in users) {
                    const user = users[i];
                    const guild = msg.message.guild;

                    if (user.id === '816872036051058698') continue;

                    guild.members.fetch(user.id).then(member => {
                        const roles = member.roles.cache.array();
                        let check = false;
                        for (let j in roles) {
                            if (roles[j].id === role.id) {
                                check = true;
                                member.roles.remove(role);
                            }
                        }
                        if (check === false) {
                            member.roles.add(role);
                        }

                        msg.remove();
                        msg.message.react('üó°')
                    })
                }
            })
        }
    } else if (emoji === 'üî´') {
        if (msg.message.author.bot === true) {
            msg.message.guild.roles.fetch('825341898318151681').then(role => {
                const users = msg.users.cache.array();
                for (let i in users) {
                    const user = users[i];
                    const guild = msg.message.guild;

                    if (user.id === '816872036051058698') continue;

                    guild.members.fetch(user.id).then(member => {
                        const roles = member.roles.cache.array();
                        let check = false;
                        for (let j in roles) {
                            if (roles[j].id === role.id) {
                                check = true;
                                member.roles.remove(role);
                            }
                        }
                        if (check === false) {
                            member.roles.add(role);
                        }

                        msg.remove();
                        msg.message.react('üî´')
                    })
                }
            })
        }
    } else if (emoji === 'üîî') {
        if (msg.message.author.bot === true) {
            msg.message.guild.roles.fetch('868513502443208704').then(role => {
                const users = msg.users.cache.array();
                for (let i in users) {
                    const user = users[i];
                    const guild = msg.message.guild;

                    if (user.id === '816872036051058698') continue;

                    guild.members.fetch(user.id).then(member => {
                        const roles = member.roles.cache.array();
                        let check = false;
                        for (let j in roles) {
                            if (roles[j].id === role.id) {
                                check = true;
                                member.roles.remove(role);
                            }
                        }
                        if (check === false) {
                            member.roles.add(role);
                        }

                        msg.remove();
                        msg.message.react('üîî')
                    })
                }
            })
        }
    }
})

client.on("guildMemberAdd", (member) => {
    member.guild.fetchInvites().then(guildInvites => {

        const ei = invites[member.guild.id];
        invites[member.guild.id] = guildInvites;

        const invite = guildInvites.find(i => ei.get(i.code).uses < i.uses);
        if (invite == null || invite.inviter == null) {
            client.channels.fetch('869693463510278245').then((channel: ds.TextChannel) => {
                const embed = new ds.MessageEmbed()
                    .setColor(0xf05656)
                    .setTitle('–ü–†–ò–í–ï–¢!')
                    .setDescription(`–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –Ω–∞ –º–æ–µ–º —Å–µ—Ä–≤–µ—Ä–µ, —É–≤–µ—Ä—è—é, –∑–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ
    
–í <#865580513879261194> –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Å–ª–µ–¥—É–µ—Ç —Å–æ–±–ª—é–¥–∞—Ç—å
–ó–∞–≥–ª—è–Ω–∏ –≤ <#868238068283473952> –∏ –≤—ã–±–µ—Ä–∏ —Å–µ–±–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–ª—è —Ç–µ–±—è
–ü–µ—Ä–µ–¥–∞–≤–∞–π –≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç –≤ <#868108110001221632>
–£–¥–∞—á–∏!`)
                    .setFooter(`With ‚ù§Ô∏è by Jourloy`)
                channel.send(`<@${member.id}>`, {embed: embed}).then(mss => mss.react('üëã'));
            });
            return;
        }
        const inviter = client.users.cache.get(invite.inviter.id);

        manager.updateInviterMember(inviter.username);

        client.channels.fetch('869693463510278245').then((channel: ds.TextChannel) => {
            const embed = new ds.MessageEmbed()
                .setColor(0xf05656)
                .setTitle('–ü–†–ò–í–ï–¢!')
                .setDescription(`–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –Ω–∞ –º–æ–µ–º —Å–µ—Ä–≤–µ—Ä–µ, —É–≤–µ—Ä—è—é, –∑–¥–µ—Å—å —Ç—ã –Ω–∞–π–¥–µ—à—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ

–í <#865580513879261194> –µ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é —Å–ª–µ–¥—É–µ—Ç —Å–æ–±–ª—é–¥–∞—Ç—å
–ó–∞–≥–ª—è–Ω–∏ –≤ <#868238068283473952> –∏ –≤—ã–±–µ—Ä–∏ —Å–µ–±–µ —Ä–æ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–ª—è —Ç–µ–±—è
–ü–µ—Ä–µ–¥–∞–≤–∞–π –≤—Å–µ–º –ø—Ä–∏–≤–µ—Ç –≤ <#868108110001221632>
–£–¥–∞—á–∏!

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

<@${inviter.id}> –ø—Ä–∏–≥–ª–∞—Å–∏–ª —ç—Ç–æ–≥–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞`)
                .setFooter(`With ‚ù§Ô∏è by Jourloy`)
            channel.send(`<@${member.id}>`, {embed: embed}).then(mss => mss.react('üëã'));
        })
    });
})